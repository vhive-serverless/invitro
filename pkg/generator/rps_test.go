package generator

import (
	"github.com/vhive-serverless/loader/pkg/common"
	"math"
	"testing"
)

func TestWarmStartMatrix(t *testing.T) {
	tests := []struct {
		testName           string
		experimentDuration int
		rpsTarget          float64
		expectedIAT        common.IATArray
		expectedCount      []int
	}{
		{
			testName:           "2min_1rps",
			experimentDuration: 2,
			rpsTarget:          1,
			expectedIAT: []float64{
				// minute 1
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				// minute 2
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
				1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000, 1_000_000,
			},
			expectedCount: []int{60, 60},
		},
		{
			testName:           "2min_0.5rps",
			experimentDuration: 2,
			rpsTarget:          0.5,
			expectedIAT: []float64{
				// minute 1
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				// minute 2
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
				2_000_000, 2_000_000, 2_000_000, 2_000_000, 2_000_000,
			},
			expectedCount: []int{30, 30},
		},
		{
			testName:           "2min_0.125rps",
			experimentDuration: 2,
			rpsTarget:          0.125,
			expectedIAT: []float64{
				// minute 1
				8_000_000, 8_000_000, 8_000_000, 8_000_000, 8_000_000, 8_000_000, 8_000_000, 8_000_000,
				// minute 2
				8_000_000, 8_000_000, 8_000_000, 8_000_000, 8_000_000, 8_000_000, 8_000_000,
			},
			expectedCount: []int{8, 7},
		},
	}

	epsilon := 0.01

	for _, test := range tests {
		t.Run("warm_start"+test.testName, func(t *testing.T) {
			matrix, minuteCount := GenerateWarmStartFunction(test.experimentDuration, test.rpsTarget)

			if len(matrix) != len(test.expectedIAT) {
				t.Errorf("Unexpected IAT array size - got: %d, expected: %d", len(matrix), len(test.expectedIAT))
			}
			if len(minuteCount) != len(test.expectedCount) {
				t.Errorf("Unexpected count array size - got: %d, expected: %d", len(minuteCount), len(test.expectedCount))
			}

			sum := 0.0
			count := 0
			currentMinute := 0

			for i := 0; i < len(matrix); i++ {
				if math.Abs(matrix[i]-test.expectedIAT[i]) > epsilon {
					t.Error("Unexpected IAT value.")
				}

				sum += matrix[i]
				count++

				if int(sum/60_000_000) != currentMinute {
					if count != test.expectedCount[currentMinute] {
						t.Error("Unexpected count array value.")
					}

					currentMinute = int(sum / 60_000_000)
					count = 0
				}
			}
		})
	}
}

func TestColdStartMatrix(t *testing.T) {
	tests := []struct {
		testName           string
		experimentDuration int
		rpsTarget          float64
		cooldownSeconds    int
		expectedIAT        []common.IATArray
		expectedCount      [][]int
	}{
		{
			testName:           "2min_1rps",
			experimentDuration: 2,
			rpsTarget:          1,
			cooldownSeconds:    10,
			expectedIAT: []common.IATArray{
				{10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{11_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{12_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{13_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{14_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{15_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{16_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{17_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{18_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{19_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
			},
			expectedCount: [][]int{
				{6, 6},
				{6, 6},
				{6, 6},
				{6, 6},
				{6, 6},
				{6, 6},
				{6, 6},
				{6, 6},
				{6, 6},
				{6, 6},
			},
		},
		{
			testName:           "1min_0.25rps",
			experimentDuration: 1,
			rpsTarget:          0.25,
			cooldownSeconds:    10,
			expectedIAT: []common.IATArray{
				{12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
				{16_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
				{20_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
			},
			expectedCount: [][]int{
				{5},
				{5},
				{5},
			},
		},
		{
			testName:           "2min_0.25rps",
			experimentDuration: 2,
			rpsTarget:          0.25,
			cooldownSeconds:    10,
			expectedIAT: []common.IATArray{
				{12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
				{16_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
				{20_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
			},
			expectedCount: [][]int{
				{5, 5},
				{5, 5},
				{5, 5},
			},
		},
		{
			testName:           "1min_0.33rps",
			experimentDuration: 1,
			rpsTarget:          1.0 / 3,
			cooldownSeconds:    10,
			expectedIAT: []common.IATArray{
				{12_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
				{15_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
				{18_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
				{21_000_000, 12_000_000, 12_000_000, 12_000_000, 12_000_000},
			},
			expectedCount: [][]int{
				{5},
				{5},
				{5},
				{5},
			},
		},
		{
			testName:           "1min_5rps",
			experimentDuration: 1,
			rpsTarget:          5,
			cooldownSeconds:    10,
			expectedIAT: []common.IATArray{
				{10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{10_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{10_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{10_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{10_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{11_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{11_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{11_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{11_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{11_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{12_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{12_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{12_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{12_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{12_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{13_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{13_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{13_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{13_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{13_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{14_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{14_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{14_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{14_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{14_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{15_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{15_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{15_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{15_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{15_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{16_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{16_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{16_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{16_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{16_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{17_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{17_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{17_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{17_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{17_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{18_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{18_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{18_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{18_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{18_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},

				{19_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{19_200_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{19_400_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{19_600_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
				{19_800_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000, 10_000_000},
			},
			expectedCount: [][]int{
				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},

				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},
				{6}, {6}, {6}, {6}, {6},
			},
		},
		{
			testName:           "1min_5rps_cooldown5s",
			experimentDuration: 1,
			rpsTarget:          5,
			cooldownSeconds:    5,
			expectedIAT: []common.IATArray{
				{5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{5_200_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{5_400_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{5_600_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{5_800_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},

				{6_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{6_200_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{6_400_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{6_600_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{6_800_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},

				{7_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{7_200_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{7_400_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{7_600_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{7_800_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},

				{8_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{8_200_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{8_400_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{8_600_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{8_800_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},

				{9_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{9_200_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{9_400_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{9_600_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
				{9_800_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000, 5_000_000},
			},
			expectedCount: [][]int{
				{12}, {12}, {12}, {12}, {12},
				{12}, {12}, {12}, {12}, {12},
				{12}, {12}, {12}, {12}, {12},
				{12}, {12}, {12}, {12}, {12},
				{12}, {12}, {12}, {12}, {12},
			},
		},
	}

	epsilon := 0.01

	for _, test := range tests {
		t.Run("cold_start_"+test.testName, func(t *testing.T) {
			matrix, minuteCounts := GenerateColdStartFunctions(test.experimentDuration, test.rpsTarget, test.cooldownSeconds)

			if len(matrix) != len(test.expectedIAT) {
				t.Errorf("Unexpected number of functions - got: %d, expected: %d", len(matrix), len(test.expectedIAT))
			}
			if len(minuteCounts) != len(test.expectedCount) {
				t.Errorf("Unexpected count array size - got: %d, expected: %d", len(minuteCounts), len(test.expectedCount))
			}

			for fIndex := 0; fIndex < len(matrix); fIndex++ {
				sum := 0.0
				count := 0
				currentMinute := 0

				if len(matrix[fIndex]) != len(test.expectedIAT[fIndex]) {
					t.Errorf("Unexpected length of function %d IAT array - got: %d, expected: %d", fIndex, len(matrix[fIndex]), len(test.expectedIAT[fIndex]))
				}

				for i := 0; i < len(matrix[fIndex]); i++ {
					if math.Abs(matrix[fIndex][i]-test.expectedIAT[fIndex][i]) > epsilon {
						t.Errorf("Unexpected value fx %d val %d - got: %f; expected: %f", fIndex, i, matrix[fIndex][i], test.expectedIAT[fIndex][i])
					}

					if currentMinute > len(test.expectedCount[fIndex]) {
						t.Errorf("Invalid expected count array size for function with index %d", fIndex)
					}

					if matrix[fIndex][i] >= 0 {
						sum += matrix[fIndex][i]
					}
					count++

					if int(sum/60_000_000) != currentMinute {
						if count != test.expectedCount[fIndex][currentMinute] {
							t.Errorf("Unexpected count array value fx %d; min %d - got: %d; expected: %d", fIndex, currentMinute, count, test.expectedCount[fIndex][currentMinute])
						}

						currentMinute = int(sum / 60_000_000)
						count = 0
					}
				}
			}
		})
	}
}
