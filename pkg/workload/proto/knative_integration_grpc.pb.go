// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pkg/workload/proto/knative_integration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KhalaKnativeIntegration_AddVM_FullMethodName          = "/proto.KhalaKnativeIntegration/AddVM"
	KhalaKnativeIntegration_RemoveVM_FullMethodName       = "/proto.KhalaKnativeIntegration/RemoveVM"
	KhalaKnativeIntegration_DestroyAll_FullMethodName     = "/proto.KhalaKnativeIntegration/DestroyAll"
	KhalaKnativeIntegration_CreateSnapshot_FullMethodName = "/proto.KhalaKnativeIntegration/CreateSnapshot"
)

// KhalaKnativeIntegrationClient is the client API for KhalaKnativeIntegration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KhalaKnativeIntegrationClient interface {
	AddVM(ctx context.Context, in *AddVMRequest, opts ...grpc.CallOption) (*AddVMResponse, error)
	RemoveVM(ctx context.Context, in *RemoveVMRequest, opts ...grpc.CallOption) (*RemoveVMResponse, error)
	DestroyAll(ctx context.Context, in *DestroyAllRequest, opts ...grpc.CallOption) (*DestroyAllResponse, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
}

type khalaKnativeIntegrationClient struct {
	cc grpc.ClientConnInterface
}

func NewKhalaKnativeIntegrationClient(cc grpc.ClientConnInterface) KhalaKnativeIntegrationClient {
	return &khalaKnativeIntegrationClient{cc}
}

func (c *khalaKnativeIntegrationClient) AddVM(ctx context.Context, in *AddVMRequest, opts ...grpc.CallOption) (*AddVMResponse, error) {
	out := new(AddVMResponse)
	err := c.cc.Invoke(ctx, KhalaKnativeIntegration_AddVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *khalaKnativeIntegrationClient) RemoveVM(ctx context.Context, in *RemoveVMRequest, opts ...grpc.CallOption) (*RemoveVMResponse, error) {
	out := new(RemoveVMResponse)
	err := c.cc.Invoke(ctx, KhalaKnativeIntegration_RemoveVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *khalaKnativeIntegrationClient) DestroyAll(ctx context.Context, in *DestroyAllRequest, opts ...grpc.CallOption) (*DestroyAllResponse, error) {
	out := new(DestroyAllResponse)
	err := c.cc.Invoke(ctx, KhalaKnativeIntegration_DestroyAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *khalaKnativeIntegrationClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, KhalaKnativeIntegration_CreateSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KhalaKnativeIntegrationServer is the server API for KhalaKnativeIntegration service.
// All implementations must embed UnimplementedKhalaKnativeIntegrationServer
// for forward compatibility
type KhalaKnativeIntegrationServer interface {
	AddVM(context.Context, *AddVMRequest) (*AddVMResponse, error)
	RemoveVM(context.Context, *RemoveVMRequest) (*RemoveVMResponse, error)
	DestroyAll(context.Context, *DestroyAllRequest) (*DestroyAllResponse, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	mustEmbedUnimplementedKhalaKnativeIntegrationServer()
}

// UnimplementedKhalaKnativeIntegrationServer must be embedded to have forward compatible implementations.
type UnimplementedKhalaKnativeIntegrationServer struct {
}

func (UnimplementedKhalaKnativeIntegrationServer) AddVM(context.Context, *AddVMRequest) (*AddVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVM not implemented")
}
func (UnimplementedKhalaKnativeIntegrationServer) RemoveVM(context.Context, *RemoveVMRequest) (*RemoveVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVM not implemented")
}
func (UnimplementedKhalaKnativeIntegrationServer) DestroyAll(context.Context, *DestroyAllRequest) (*DestroyAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAll not implemented")
}
func (UnimplementedKhalaKnativeIntegrationServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedKhalaKnativeIntegrationServer) mustEmbedUnimplementedKhalaKnativeIntegrationServer() {
}

// UnsafeKhalaKnativeIntegrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KhalaKnativeIntegrationServer will
// result in compilation errors.
type UnsafeKhalaKnativeIntegrationServer interface {
	mustEmbedUnimplementedKhalaKnativeIntegrationServer()
}

func RegisterKhalaKnativeIntegrationServer(s grpc.ServiceRegistrar, srv KhalaKnativeIntegrationServer) {
	s.RegisterService(&KhalaKnativeIntegration_ServiceDesc, srv)
}

func _KhalaKnativeIntegration_AddVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KhalaKnativeIntegrationServer).AddVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KhalaKnativeIntegration_AddVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KhalaKnativeIntegrationServer).AddVM(ctx, req.(*AddVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KhalaKnativeIntegration_RemoveVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KhalaKnativeIntegrationServer).RemoveVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KhalaKnativeIntegration_RemoveVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KhalaKnativeIntegrationServer).RemoveVM(ctx, req.(*RemoveVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KhalaKnativeIntegration_DestroyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KhalaKnativeIntegrationServer).DestroyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KhalaKnativeIntegration_DestroyAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KhalaKnativeIntegrationServer).DestroyAll(ctx, req.(*DestroyAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KhalaKnativeIntegration_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KhalaKnativeIntegrationServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KhalaKnativeIntegration_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KhalaKnativeIntegrationServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KhalaKnativeIntegration_ServiceDesc is the grpc.ServiceDesc for KhalaKnativeIntegration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KhalaKnativeIntegration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KhalaKnativeIntegration",
	HandlerType: (*KhalaKnativeIntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVM",
			Handler:    _KhalaKnativeIntegration_AddVM_Handler,
		},
		{
			MethodName: "RemoveVM",
			Handler:    _KhalaKnativeIntegration_RemoveVM_Handler,
		},
		{
			MethodName: "DestroyAll",
			Handler:    _KhalaKnativeIntegration_DestroyAll_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _KhalaKnativeIntegration_CreateSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/workload/proto/knative_integration.proto",
}
